<?xml version="1.0"?>
<!-- Basic WAM-V with gazebo plugins for dynamics -->
<robot xmlns:xacro="http://ros.org/wiki/xacro"
       name="WAM-V">
  <xacro:arg name="locked" default="false" />
  <xacro:arg name="thruster_config" default="H" />
  <xacro:arg name="camera_enabled" default="true" />
  <xacro:arg name="gps_enabled" default="true" />
  <xacro:arg name="imu_enabled" default="true" />
  <xacro:arg name="lidar_enabled" default="true" />
  
  <xacro:arg name="planar_enabled" default="true" />
  <xacro:arg name="sonar_enabled" default="true" />
  
  <xacro:arg name="vrx_sensors_enabled" default="false" />
  <xacro:arg name="thruster_namespace" default="thrusters/"/>
  <xacro:arg name="camera_namespace" default="cameras/"/>  
  <xacro:arg name="sensor_namespace" default="sensors/"/>
  <xacro:arg name="shooter_namespace" default="shooters/"/>
  <!-- Note: this is only used for some sensors that do not correctly use the 
  robotNamespace parameter -->
  <xacro:arg name="namespace" default="wamv"/>    
  <xacro:property name="thruster_namespace" value="$(arg thruster_namespace)" scope="global" />
  <xacro:property name="camera_namespace" value="$(arg camera_namespace)" scope="global" />
  <xacro:property name="sensor_namespace" value="$(arg sensor_namespace)" scope="global" />
  <xacro:property name="shooter_namespace" value="$(arg shooter_namespace)" scope="global" />
  <xacro:property name="namespace" value="$(arg namespace)" scope="global" />      
  
  <!-- Sensor yaml file -->
  <xacro:arg name="yaml_component_generation" default="false"/>
  <xacro:arg name="component_xacro_file" default = ""/>

  <!-- Thruster yaml file -->
  <xacro:arg name="yaml_thruster_generation" default="false"/>
  <xacro:arg name="thruster_xacro_file" default = ""/>

  <!-- === The WAM-V platform === -->
  <xacro:include filename="$(find wamv_gazebo)/urdf/wamv_gazebo.xacro"/>

  <!-- === Thrusters === -->
  <!-- Use thruster yaml file if given -->
  <xacro:if value="$(arg yaml_thruster_generation)">
    <xacro:wamv_gazebo thruster_layout="$(arg thruster_xacro_file)"/>
  </xacro:if>
  
  <!-- Otherwise, add thrusters based on thruster_config variable -->
  <xacro:unless value="$(arg yaml_thruster_generation)">
    <xacro:property name="thruster_conf" value="$(arg thruster_config)"/>

    <!-- Default WAM-V with two aft thrusters -->
    <xacro:if value="${thruster_conf == 'H'}">
       <xacro:wamv_gazebo thruster_layout="$(find wamv_gazebo)/urdf/thruster_layouts/wamv_aft_thrusters.xacro"/>
    </xacro:if>

    <!-- WAMV with "T" thruster configuration -->
    <xacro:if value="${thruster_conf == 'T'}">
      <xacro:wamv_gazebo thruster_layout="$(find wamv_gazebo)/urdf/thruster_layouts/wamv_t_thrusters.xacro"/>
    </xacro:if>

    <!-- WAMV with "X" thruster configuration -->
    <xacro:if value="${thruster_conf == 'X'}">
      <xacro:wamv_gazebo thruster_layout="$(find wamv_gazebo)/urdf/thruster_layouts/wamv_x_thrusters.xacro"/>
    </xacro:if>
  </xacro:unless>

  <!-- === Decide if we lock the robot to the world === -->
  <xacro:if value="$(arg locked)">
    <gazebo>
      <link name="wamv_external_link"/>
      <joint name="wamv_external_pivot_joint" type="universal">
        <parent>wamv::wamv/base_link</parent>
        <child>wamv_external_link</child>
        <axis>
          <xyz>1 0 0</xyz>
        </axis>
        <axis2>
          <xyz>0 1 0</xyz>
        </axis2>
      </joint>
      <joint name="wamv_external_riser" type="prismatic">
        <parent>world</parent>
        <child>wamv_external_link</child>
        <axis>
          <limit>
            <lower>-3</lower>
            <upper>3</upper>
          </limit>
          <xyz>0 0 1</xyz>
        </axis>
      </joint>
    </gazebo>
  </xacro:if>

  <!-- === Sensors === -->
  <!-- Use sensor yaml file if given -->
  <xacro:if value="$(arg yaml_component_generation)">
    <xacro:include filename="$(arg component_xacro_file)"/>
    <xacro:yaml_components />
    
    
    <!-- sonar_enabled -->
      <xacro:if value="$(arg sonar_enabled)">
    <xacro:sonar name="sonar_sensor" x="1.6" y="0.4" z="1.6" ros_topic="/distance1" Y="${radians(0)}"  update_rate="10" min_range="0.3" max_range="2" field_of_view="56" ray_count="2" />
  
    <xacro:sonar name="sonar_sensor2" x="1.6" y="-0.4" z="1.6" ros_topic="/distance2" Y="${radians(0)}" update_rate="10" min_range="0.3" max_range="2" field_of_view="56" ray_count="2" />

    <xacro:sonar name="sonar_sensor3" x="0.3" y="0.4" z="1.6" ros_topic="/distance3" Y="${radians(180)}" update_rate="10" min_range="0.3" max_range="2" field_of_view="56" ray_count="2" />

    <xacro:sonar name="sonar_sensor4" x="0.3" y="-0.4" z="1.6" ros_topic="/distance4" Y="${radians(180)}" update_rate="10" min_range="0.3" max_range="2" field_of_view="56" ray_count="2" /> 
  </xacro:if>

    <!-- Add CPU Cases -->
    <xacro:include filename="$(find wamv_description)/urdf/cpu_cases.xacro" />
    <xacro:cpu_cases position="0.75 0 0.65" orientation="0 0 0"/>
  </xacro:if>
  
  <!-- Otherwise, add sensors based on enable variables -->
  <xacro:unless value="$(arg yaml_component_generation)">
    
    <!-- Add simulated GPS -->
    <xacro:if value="$(arg gps_enabled)">
      <xacro:wamv_gps name="gps_wamv" x="0.65" y="-0.1" z="0.55" />
    </xacro:if>
    
    <!-- Add Simulated IMU -->
    <xacro:if value="$(arg imu_enabled)">
      <xacro:wamv_imu name="imu_wamv" x="1.2" y="-0.1" z="0.55" />
    </xacro:if>
    
    <!-- Add 3D LIDAR -->
    <xacro:if value="$(arg lidar_enabled)">
      <xacro:lidar name="lidar_wamv" x="0.6" y="-0.1" z="1.1" type="16_beam"/>
    </xacro:if>
    
      <!-- Add PLANAR -->
  	<xacro:if value="$(arg planar_enabled)"> 
    	<xacro:wamv_multibeam_laser name="planar_wamv" x="1.2" y="0" z="1"/>
  	</xacro:if>
    

    
    <!-- ==== VRX sensor configuration ==== -->
    <xacro:if value="$(arg vrx_sensors_enabled)">
    
    
    
      <!-- Add a camera facing right -->
      <xacro:if value="$(arg camera_enabled)">
      
      <xacro:wamv_camera name="front_camera" y="-0.1" x="1.6" z="1.1" />
      
      <xacro:wamv_camera name="back_camera" y="-0.1" x="0.30" z="1.1" P="${radians(-180)}"/>
      
    </xacro:if>
    
  
    </xacro:if>
  </xacro:unless>

</robot>
